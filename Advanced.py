from transformers import pipeline
from translator import *
import re

pipe = pipeline("text-classification", model="cardiffnlp/twitter-roberta-base-emotion-multilabel-latest", top_k = 3)

emotions = {
    'anger' : 'ü§¨',
    'anticipation' : 'üòØ',
    'disgust' : 'üòñ',
    'fear' : 'üò±',
    'joy' : 'ü§ó',
    'love' : 'üå∏',
    'optimism' : 'üòå',
    'pessimism' : 'üòí',
    'sadness' : 'üòî',
    'surprise' : 'üò≥',
    'trust' : 'ü§ù'
}

texts = [
        "–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!",
        "–Ø –æ—á–µ–Ω—å –±–æ—é—Å—å —Å–æ–±–∞–∫.",
        "–ú–æ—è —Å–æ–±–∞–∫–∞ –≤—á–µ—Ä–∞ —É–º–µ—Ä–ª–∞.",
        "–Ø —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ –ª—é–±–ª—é!",
        "–Ø –±—ã —Ö–æ—Ç–µ–ª —É–º–µ—Ä–µ—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
        "–Ø –¥—É–º–∞—é, —á—Ç–æ –ª—é–±–ª—é —Ç–µ–±—è...",
        "–Ø –ù–ï–ù–ê–í–ò–ñ–£ –¢–ï–ë–Ø!",
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –º–æ—è –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –ª–∏—à—å –ø–ª–æ–¥ –º–æ–∏—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π –∏ –º–Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–±—è? –í—Å–µ —Ç–∞–∫–∏ —Ç—ã —Ç–æ –µ—â–µ –±—ã–¥–ª–æ!"
         ]

import re

def TranslateToEnglishApart(Phrase):

    PhraseApart = re.findall(r"[\w']+|[.,!?;]", Phrase)
    # print(PhraseApart)
    part = ''
    check = True
    PhraseFilter = []
    for literal in PhraseApart:
        if literal not in {'?', '.', '!', ';'}:
            if check is False: 
                PhraseFilter.append(part)
                part = ''
                check = True
            if literal == ',': part += (literal)
            else: part += (' ' + literal)
            # print(part)
            
            
        else:
            check = False
            part += literal
    PhraseFilter.append(part)
    PhraseFilter[0] = PhraseFilter[0].strip()

    # print(PhraseFilter)
    if len(PhraseFilter) > 1:
        # for 
        return [''.join([translate_ru_to_en(phrase) for phrase in PhraseFilter])]
    else:
        return [translate_ru_to_en(Phrase)]

# print(TranslateToEnglishApart("–ú–æ–∂–µ—Ç –±—ã—Ç—å, –º–æ—è –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –ª–∏—à—å –ø–ª–æ–¥ –º–æ–∏—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π –∏ –º–Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–±—è?.. –í—Å–µ —Ç–∞–∫–∏ —Ç—ã —Ç–æ –µ—â–µ –±—ã–¥–ª–æ!"))


def Response(Phrase):

    PhraseApart = TranslateToEnglishApart(Phrase)
    
    texts_en = [translate_ru_to_en(phrase) for phrase in PhraseApart]
    results = pipe(texts_en)

    for text, result in zip(texts_en, results):
        EmotionsAll = [emotions[res['label']] if res['score'] > 0.5 else None for res in result]
        EmotionsFilter = list(filter( lambda x:  x if x is not None else x , EmotionsAll))
        print(text, ' ' , EmotionsFilter)    
    return EmotionsFilter if EmotionsFilter != [] else ['üòê']
    # print(results)
# for Phrase in texts:
#     print(Response(Phrase))

Response("–ú–æ–∂–µ—Ç –±—ã—Ç—å, –º–æ—è –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –ª–∏—à—å –ø–ª–æ–¥ –º–æ–∏—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π –∏ –º–Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ–±—è?.. –í—Å–µ —Ç–∞–∫–∏ —Ç—ã —Ç–æ –µ—â–µ –±—ã–¥–ª–æ! –Ø –≤—Å–µ –µ—â–µ –ª—é–±–ª—é —Ç–µ–±—è, –Ω–æ —Ç—ã –≥–ª—É–±–æ–∫–æ —Ä–∞–Ω–∏–ª –º–æ–∏ —á—É–≤—Å—Ç–≤–∞.")